(load "p4Lisp.txt")
(load "p4LispDef.txt")
(set_isa article a an the)
(set_isa noun movies movie rentals rental customer customers)
(set_isa noun ID title genre rating custNr name state date number gender)
(set_isa verb count select show print)
(set_isa prep of with to in for)
(set_isa comparator equal after before)
(set_isa adjective horror scifi romance comedy action male female g pg pg13 r x )

(putp 'movie table-ht 'movie)
(putp 'movies table-ht 'movie)
(putp 'rental table-ht 'rental)
(putp 'rentals table-ht 'rental)
(putp 'customer table-ht 'customer)
(putp 'customers table-ht 'customer)

;;;
;;; first form:  verb [article] directObj prep [article] indirectObj
;;;
(processRequest '(count the number of rentals ))  

(processRequest '(count the number of movies )) 

(processRequest '(show ID for movies )) 

;;;
;;; second form: verb [article] directObj prep [article] indirectObj 
;;;                   prep [article] qualIndirectObj comparator [prep] qualValue
;;;
(processRequest '(show the title of movies with rating equal to PG13))

(processRequest '(Count the number of rentals with date after 2018-10-01))

(processRequest '(Show the title for the movie with ID equal to HP001)) 

(processRequest '(Select the name of the customer with custNr equal to 111)) 

;;;
;;;  Examples with NOT
;;;
(processRequest '(Show title for movies with rating not equal to G)) 

;;; 
;;; Some invalid requests
;;;
(processRequest '(Show title for videos with a rating of G))
(processRequest '(Show title for movies having a rating of G))
(processRequest '(Show title for movies with a rating of G or PG)) 

;;; see if doing extra credit, return if not
(if (NOT(EQL doingExtra 'EC2))
(abort))

(processRequest '(Show the title of movies in the horror genre)) 

(processRequest '(Show the genre of movies with a G rating)) 

(processRequest '(Count the number of customers with a male gender))

(processRequest '(Count the number of movies with a PG13 rating))






